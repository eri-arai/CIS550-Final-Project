{"ast":null,"code":"var _jsxFileName = \"/Users/alexandraulven/CIS550-Final-Project/CIS550-Final-Project/client/src/components/Billboards.js\";\nimport React from 'react';\nimport PageNavbar from './PageNavbar';\nimport BillboardRow from './BillboardRow'; // import BillboardRowTest from './BillboardRowTest';\n\nimport '../style/Billboards.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nexport default class Billboards extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      let value = event.target.value;\n      let name = event.target.name; // this.setState({\n      // \t[name]: value\n      // });\n\n      if (name == 'selectedYear') {\n        console.log(\"Update to year\");\n        this.setState({\n          selectedYear: value\n        });\n        this.selectedYear = value;\n      } else if (name == 'selectedMonth') {\n        console.log(\"Update to month\");\n        this.setState({\n          selectedMonth: value\n        });\n        this.selectedMonth = value;\n      } else if (name == 'selectedDay') {\n        console.log(\"Update to day\");\n        this.setState({\n          selectedDay: value\n        });\n        this.selectedDay = value;\n      }\n\n      console.log(name, value);\n      console.log(\"selectedYear is \" + this.selectedYear);\n      console.log(\"selectedMonth is \" + this.selectedMonth); // update options for Day\n\n      console.log(\"http://localhost:8081/billboardsd/\" + this.selectedYear + \"/\" + this.selectedMonth);\n      fetch(\"http://localhost:8081/billboardsd/\" + this.selectedYear + \"/\" + this.selectedMonth, {\n        method: 'GET' // The type of HTTP request.\n\n      }).then(res => {\n        // Convert the response data to a JSON.\n        return res.json();\n      }, err => {\n        // Print the error if there is one.\n        console.log(err);\n      }).then(dayList => {\n        if (!dayList) return; // Map each dayObj in genreList to an HTML element:\n\n        let dayDivs = dayList.map((dayObj, i) => /*#__PURE__*/React.createElement(\"option\", {\n          value: dayObj.day,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 6\n          }\n        }, dayObj.day)); // Set the state of the days list to the value returned by the HTTP response from the server.\n\n        this.setState({\n          days: dayDivs\n        });\n      }, err => {\n        // Print the error if there is one.\n        console.log(err);\n      });\n    };\n\n    this.state = {\n      selectedBillboard: \"\",\n      selectedYear: \"\",\n      selectedMonth: \"\",\n      selectedDay: \"\",\n      years: [],\n      months: [],\n      days: [],\n      billboards: [],\n      songs: [] // , songsTest: []\n\n    };\n    this.submitBillboard = this.submitBillboard.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  /* ---- Billboards ---- */\n\n\n  componentDidMount() {\n    // Send an HTTP request to the server.\n    // fetch(\"http://localhost:8081/billboards\",\n    // {\n    //   method: 'GET' // The type of HTTP request.\n    // }).then(res => {\n    //   // Convert the response data to a JSON.\n    // \treturn res.json();\n    // }, err => {\n    //   // Print the error if there is one.\n    //   console.log(err);\n    // }).then(billboardList => {\n    //   if (!billboardList) return;\n    //   // Map each genreObj in genreList to an HTML element:\n    //   // A button which triggers the showMovies function for each genre.\n    //   let billboardDivs = billboardList.map((billboardObj, i) =>\n    // //   <option value={billboardObj.billboard}>{billboardObj.billboard}</option> \n    //   <option value={billboardObj.week_id}>{billboardObj.week_id}</option>  \n    //   );\n    //   // Set the state of the genres list to the value returned by the HTTP response from the server.\n    //   this.setState({\n    // \tbillboards: billboardDivs\n    //   });\n    // }, err => {\n    //   // Print the error if there is one.\n    //   console.log(err);\n    // });\n    fetch(\"http://localhost:8081/billboardsy/\", {\n      method: 'GET' // The type of HTTP request.\n\n    }).then(res => {\n      // Convert the response data to a JSON.\n      return res.json();\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    }).then(yearList => {\n      if (!yearList) return; // Map each yearObj in genreList to an HTML element:\n\n      let yearDivs = yearList.map((yearObj, i) => /*#__PURE__*/React.createElement(\"option\", {\n        value: yearObj.year,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 6\n        }\n      }, yearObj.year)); // Set the state of the years list to the value returned by the HTTP response from the server.\n\n      this.setState({\n        years: yearDivs\n      });\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    });\n    fetch(\"http://localhost:8081/billboardsm/\", {\n      method: 'GET' // The type of HTTP request.\n\n    }).then(res => {\n      // Convert the response data to a JSON.\n      return res.json();\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    }).then(monthList => {\n      if (!monthList) return; // Map each monthObj in genreList to an HTML element:\n\n      let monthDivs = monthList.map((monthObj, i) => /*#__PURE__*/React.createElement(\"option\", {\n        value: monthObj.month,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 6\n        }\n      }, monthObj.month)); // Set the state of the months list to the value returned by the HTTP response from the server.\n\n      this.setState({\n        months: monthDivs\n      });\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    });\n    console.log(\"http://localhost:8081/billboardsd/\" + this.selectedYear + \"/\" + this.selectedMonth);\n    fetch(\"http://localhost:8081/billboardsd/\" + this.selectedYear + \"/\" + this.selectedMonth, {\n      method: 'GET' // The type of HTTP request.\n\n    }).then(res => {\n      // Convert the response data to a JSON.\n      return res.json();\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    }).then(dayList => {\n      if (!dayList) return; // Map each dayObj in genreList to an HTML element:\n\n      let dayDivs = dayList.map((dayObj, i) => /*#__PURE__*/React.createElement(\"option\", {\n        value: dayObj.day,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 6\n        }\n      }, dayObj.day)); // Set the state of the days list to the value returned by the HTTP response from the server.\n\n      this.setState({\n        days: dayDivs\n      });\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    });\n  } // handleChange(e) {\n  // \tthis.setState({\n  // \t\tselectedBillboard: e.target.value\n  // \t});\n  // }\n\n\n  // hit Submit\n  submitBillboard() {\n    // var fixed = this.state.selectedBillboard.replace(/\\//g,\"-\")\n    var fixed = this.selectedMonth + \"-\" + this.selectedDay + \"-\" + this.selectedYear;\n    console.log(\"http://localhost:8081/billboards/\" + fixed); // fetch(\"http://localhost:8081/billboards/\" + this.state.selectedBillboard,\n\n    fetch(\"http://localhost:8081/billboards/\" + fixed, {\n      method: \"GET\"\n    }).then(res => {\n      return res.json();\n    }, err => {\n      console.log(err);\n    }).then(songList => {\n      console.log(songList); //displays your JSON object in the console\n\n      let songDivs = songList.map((song, i) =>\n      /*#__PURE__*/\n      // <RecommendationsRow key={recommendation.id} movie={recommendation} />\n      React.createElement(\"div\", {\n        id: \"results\",\n        key: i,\n        className: \"results-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(BillboardRow, {\n        song_title: song.song_title,\n        artist_name: song.artist_name,\n        week_position: song.week_position,\n        peak_position: song.peak_position,\n        weeks_on_chart: song.weeks_on_chart,\n        release_date: song.release_date,\n        release_year: song.release_year,\n        acousticness: song.acousticness,\n        danceability: song.danceability,\n        duration_ms: song.duration_ms,\n        energy: song.energy,\n        explicit: song.explicit,\n        instrumentalness: song.instrumentalness,\n        musical_key: song.musical_key,\n        liveness: song.liveness,\n        loudness: song.loudness,\n        mode: song.mode,\n        popularity: song.popularity,\n        speechiness: song.speechiness,\n        tempo: song.tempo,\n        valence: song.valence,\n        genre: song.genre,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 6\n        }\n      }))); // //test\n      // let songDivsTest = songList.map((song, i) => \n      // \t// <RecommendationsRow key={recommendation.id} movie={recommendation} />\n      // \t<div id=\"results\" key={i} className=\"results-container\">\n      // \t\t<BillboardRowTest song_title={song.song_title} artist_name={song.artist_name} week_position={song.week_position} peak_position={song.peak_position} weeks_on_chart={song.weeks_on_chart}\n      // \t\trelease_date={song.release_date} release_year={song.release_year} acousticness={song.acousticness} danceability={song.danceability} \n      // \t\tduration_ms={song.duration_ms} energy={song.energy} explicit={song.explicit} instrumentalness={song.instrumentalness} musical_key={song.musical_key}\n      // \t\tliveness={song.liveness} loudness={song.loudness} mode={song.mode} popularity={song.popularity} speechiness={song.speechiness} \n      // \t\ttempo={song.tempo} valence={song.valence} genre={song.genre}/>\n      // \t</div>\n      // );\n\n      this.setState({\n        songs: songDivs //test\n        // songsTest: songDivsTest\n\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Billboards\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(PageNavbar, {\n      active: \"billboards\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container billboards-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 12\n      }\n    }, \"Billboards\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"years-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropdown-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      value: this.state.selectedYear,\n      onChange: this.handleChange,\n      name: \"selectedYear\",\n      className: \"dropdown\",\n      id: \"billboardsDropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      select: true,\n      value: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }\n    }, \" -- select a year -- \"), this.state.years), /*#__PURE__*/React.createElement(\"select\", {\n      value: this.state.selectedMonth,\n      onChange: this.handleChange,\n      name: \"selectedMonth\",\n      className: \"dropdown\",\n      id: \"billboardsDropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      select: true,\n      value: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }\n    }, \" -- select a month -- \"), this.state.months), /*#__PURE__*/React.createElement(\"select\", {\n      value: this.state.selectedDay,\n      onChange: this.handleChange,\n      name: \"selectedDay\",\n      className: \"dropdown\",\n      id: \"billboardsDropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      select: true,\n      value: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }\n    }, \" -- select a day -- \"), this.state.days), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"submit-btn\",\n      id: \"billboardsSubmitBtn\",\n      onClick: this.submitBillboard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 16\n      }\n    }, \"Submit\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"song-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"song\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 40\n      }\n    }, \"Week Position\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 40\n      }\n    }, \"Song Title\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 31\n      }\n    }, \"Artist Name\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"song-container\",\n      id: \"results\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 14\n      }\n    }, this.state.songs)))));\n  }\n\n}","map":{"version":3,"sources":["/Users/alexandraulven/CIS550-Final-Project/CIS550-Final-Project/client/src/components/Billboards.js"],"names":["React","PageNavbar","BillboardRow","Billboards","Component","constructor","props","handleChange","event","value","target","name","console","log","setState","selectedYear","selectedMonth","selectedDay","fetch","method","then","res","json","err","dayList","dayDivs","map","dayObj","i","day","days","state","selectedBillboard","years","months","billboards","songs","submitBillboard","bind","componentDidMount","yearList","yearDivs","yearObj","year","monthList","monthDivs","monthObj","month","fixed","songList","songDivs","song","song_title","artist_name","week_position","peak_position","weeks_on_chart","release_date","release_year","acousticness","danceability","duration_ms","energy","explicit","instrumentalness","musical_key","liveness","loudness","mode","popularity","speechiness","tempo","valence","genre","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CACA;;AACA,OAAO,yBAAP;AACA,OAAO,sCAAP;AAEA,eAAe,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAyC;AACvDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SAwInBC,YAxImB,GAwIHC,KAAD,IAAW;AACzB,UAAIC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAAzB;AACA,UAAIE,IAAI,GAAGH,KAAK,CAACE,MAAN,CAAaC,IAAxB,CAFyB,CAIzB;AACA;AACA;;AAEA,UAAIA,IAAI,IAAI,cAAZ,EAA2B;AAC1BC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,aAAKC,QAAL,CAAc;AACbC,UAAAA,YAAY,EAAEN;AADD,SAAd;AAGA,aAAKM,YAAL,GAAoBN,KAApB;AACA,OAND,MAMO,IAAIE,IAAI,IAAI,eAAZ,EAA4B;AAClCC,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,aAAKC,QAAL,CAAc;AACbE,UAAAA,aAAa,EAAEP;AADF,SAAd;AAGA,aAAKO,aAAL,GAAqBP,KAArB;AAEA,OAPM,MAOA,IAAIE,IAAI,IAAI,aAAZ,EAA0B;AAChCC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,aAAKC,QAAL,CAAc;AACbG,UAAAA,WAAW,EAAER;AADA,SAAd;AAGA,aAAKQ,WAAL,GAAmBR,KAAnB;AACA;;AAEDG,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAAkBF,KAAlB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqB,KAAKE,YAAtC;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsB,KAAKG,aAAvC,EA/ByB,CAkCzB;;AAEAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAuC,KAAKE,YAA5C,GAA2D,GAA3D,GAAiE,KAAKC,aAAlF;AAEAE,MAAAA,KAAK,CAAC,uCAAuC,KAAKH,YAA5C,GAA2D,GAA3D,GAAiE,KAAKC,aAAvE,EACL;AACEG,QAAAA,MAAM,EAAE,KADV,CACgB;;AADhB,OADK,CAAL,CAGGC,IAHH,CAGQC,GAAG,IAAI;AACb;AACI,eAAOA,GAAG,CAACC,IAAJ,EAAP;AACL,OAND,EAMGC,GAAG,IAAI;AACR;AACAX,QAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACD,OATD,EASGH,IATH,CASQI,OAAO,IAAI;AACjB,YAAI,CAACA,OAAL,EAAc,OADG,CAEjB;;AACA,YAAIC,OAAO,GAAGD,OAAO,CAACE,GAAR,CAAY,CAACC,MAAD,EAASC,CAAT,kBACzB;AAAQ,UAAA,KAAK,EAAED,MAAM,CAACE,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA4BF,MAAM,CAACE,GAAnC,CADa,CAAd,CAHiB,CAMjB;;AACA,aAAKf,QAAL,CAAc;AACTgB,UAAAA,IAAI,EAAEL;AADG,SAAd;AAGD,OAnBD,EAmBGF,GAAG,IAAI;AACR;AACAX,QAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACD,OAtBD;AAuBE,KArMgB;;AAGlB,SAAKQ,KAAL,GAAa;AACZC,MAAAA,iBAAiB,EAAE,EADP;AAEZjB,MAAAA,YAAY,EAAE,EAFF;AAGZC,MAAAA,aAAa,EAAE,EAHH;AAIZC,MAAAA,WAAW,EAAE,EAJD;AAKZgB,MAAAA,KAAK,EAAE,EALK;AAMZC,MAAAA,MAAM,EAAE,EANI;AAOZJ,MAAAA,IAAI,EAAE,EAPM;AAQZK,MAAAA,UAAU,EAAE,EARA;AASZC,MAAAA,KAAK,EAAE,EATK,CAUZ;;AAVY,KAAb;AAaA,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAK/B,YAAL,GAAoB,KAAKA,YAAL,CAAkB+B,IAAlB,CAAuB,IAAvB,CAApB;AACA;AAGD;;;AACAC,EAAAA,iBAAiB,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACK;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACM;AACN;AACA;AACA;AACA;AACA;AAEArB,IAAAA,KAAK,CAAC,oCAAD,EACL;AACEC,MAAAA,MAAM,EAAE,KADV,CACgB;;AADhB,KADK,CAAL,CAGGC,IAHH,CAGQC,GAAG,IAAI;AACb;AACI,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACL,KAND,EAMGC,GAAG,IAAI;AACR;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACD,KATD,EASGH,IATH,CASQoB,QAAQ,IAAI;AAClB,UAAI,CAACA,QAAL,EAAe,OADG,CAElB;;AACA,UAAIC,QAAQ,GAAGD,QAAQ,CAACd,GAAT,CAAa,CAACgB,OAAD,EAAUd,CAAV,kBAC3B;AAAQ,QAAA,KAAK,EAAEc,OAAO,CAACC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8BD,OAAO,CAACC,IAAtC,CADc,CAAf,CAHkB,CAMlB;;AACA,WAAK7B,QAAL,CAAc;AACTmB,QAAAA,KAAK,EAAEQ;AADE,OAAd;AAGD,KAnBD,EAmBGlB,GAAG,IAAI;AACR;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACD,KAtBD;AAwBAL,IAAAA,KAAK,CAAC,oCAAD,EACL;AACEC,MAAAA,MAAM,EAAE,KADV,CACgB;;AADhB,KADK,CAAL,CAGGC,IAHH,CAGQC,GAAG,IAAI;AACb;AACI,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACL,KAND,EAMGC,GAAG,IAAI;AACR;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACD,KATD,EASGH,IATH,CASQwB,SAAS,IAAI;AACnB,UAAI,CAACA,SAAL,EAAgB,OADG,CAEnB;;AACA,UAAIC,SAAS,GAAGD,SAAS,CAAClB,GAAV,CAAc,CAACoB,QAAD,EAAWlB,CAAX,kBAC7B;AAAQ,QAAA,KAAK,EAAEkB,QAAQ,CAACC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgCD,QAAQ,CAACC,KAAzC,CADe,CAAhB,CAHmB,CAMnB;;AACA,WAAKjC,QAAL,CAAc;AACToB,QAAAA,MAAM,EAAEW;AADC,OAAd;AAGD,KAnBD,EAmBGtB,GAAG,IAAI;AACR;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACD,KAtBD;AAwBAX,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAuC,KAAKE,YAA5C,GAA2D,GAA3D,GAAiE,KAAKC,aAAlF;AAEAE,IAAAA,KAAK,CAAC,uCAAuC,KAAKH,YAA5C,GAA2D,GAA3D,GAAiE,KAAKC,aAAvE,EACL;AACEG,MAAAA,MAAM,EAAE,KADV,CACgB;;AADhB,KADK,CAAL,CAGGC,IAHH,CAGQC,GAAG,IAAI;AACb;AACI,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACL,KAND,EAMGC,GAAG,IAAI;AACR;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACD,KATD,EASGH,IATH,CASQI,OAAO,IAAI;AACjB,UAAI,CAACA,OAAL,EAAc,OADG,CAEjB;;AACA,UAAIC,OAAO,GAAGD,OAAO,CAACE,GAAR,CAAY,CAACC,MAAD,EAASC,CAAT,kBACzB;AAAQ,QAAA,KAAK,EAAED,MAAM,CAACE,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4BF,MAAM,CAACE,GAAnC,CADa,CAAd,CAHiB,CAMjB;;AACA,WAAKf,QAAL,CAAc;AACTgB,QAAAA,IAAI,EAAEL;AADG,OAAd;AAGD,KAnBD,EAmBGF,GAAG,IAAI;AACR;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACD,KAtBD;AAuBA,GAhIsD,CAmIvD;AACA;AACA;AACA;AACA;;;AAiEE;AACFc,EAAAA,eAAe,GAAG;AACjB;AACA,QAAIW,KAAK,GAAG,KAAKhC,aAAL,GAAqB,GAArB,GAA2B,KAAKC,WAAhC,GAA8C,GAA9C,GAAoD,KAAKF,YAArE;AAEAH,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAsCmC,KAAlD,EAJiB,CAMjB;;AACA9B,IAAAA,KAAK,CAAC,sCAAsC8B,KAAvC,EACL;AACC7B,MAAAA,MAAM,EAAE;AADT,KADK,CAAL,CAGGC,IAHH,CAGQC,GAAG,IAAI;AACd,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACA,KALD,EAKGC,GAAG,IAAI;AACTX,MAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACA,KAPD,EAOGH,IAPH,CAOQ6B,QAAQ,IAAI;AACnBrC,MAAAA,OAAO,CAACC,GAAR,CAAYoC,QAAZ,EADmB,CACI;;AACvB,UAAIC,QAAQ,GAAGD,QAAQ,CAACvB,GAAT,CAAa,CAACyB,IAAD,EAAOvB,CAAP;AAAA;AAC3B;AACA;AAAK,QAAA,EAAE,EAAC,SAAR;AAAkB,QAAA,GAAG,EAAEA,CAAvB;AAA0B,QAAA,SAAS,EAAC,mBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC,oBAAC,YAAD;AAAc,QAAA,UAAU,EAAEuB,IAAI,CAACC,UAA/B;AAA2C,QAAA,WAAW,EAAED,IAAI,CAACE,WAA7D;AAA0E,QAAA,aAAa,EAAEF,IAAI,CAACG,aAA9F;AAA6G,QAAA,aAAa,EAAEH,IAAI,CAACI,aAAjI;AAAgJ,QAAA,cAAc,EAAEJ,IAAI,CAACK,cAArK;AACA,QAAA,YAAY,EAAEL,IAAI,CAACM,YADnB;AACiC,QAAA,YAAY,EAAEN,IAAI,CAACO,YADpD;AACkE,QAAA,YAAY,EAAEP,IAAI,CAACQ,YADrF;AACmG,QAAA,YAAY,EAAER,IAAI,CAACS,YADtH;AAEA,QAAA,WAAW,EAAET,IAAI,CAACU,WAFlB;AAE+B,QAAA,MAAM,EAAEV,IAAI,CAACW,MAF5C;AAEoD,QAAA,QAAQ,EAAEX,IAAI,CAACY,QAFnE;AAE6E,QAAA,gBAAgB,EAAEZ,IAAI,CAACa,gBAFpG;AAEsH,QAAA,WAAW,EAAEb,IAAI,CAACc,WAFxI;AAGA,QAAA,QAAQ,EAAEd,IAAI,CAACe,QAHf;AAGyB,QAAA,QAAQ,EAAEf,IAAI,CAACgB,QAHxC;AAGkD,QAAA,IAAI,EAAEhB,IAAI,CAACiB,IAH7D;AAGmE,QAAA,UAAU,EAAEjB,IAAI,CAACkB,UAHpF;AAGgG,QAAA,WAAW,EAAElB,IAAI,CAACmB,WAHlH;AAIA,QAAA,KAAK,EAAEnB,IAAI,CAACoB,KAJZ;AAImB,QAAA,OAAO,EAAEpB,IAAI,CAACqB,OAJjC;AAI0C,QAAA,KAAK,EAAErB,IAAI,CAACsB,KAJtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CAFc,CAAf,CAFmB,CAcnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,WAAK3D,QAAL,CAAc;AACbsB,QAAAA,KAAK,EAAEc,QADM,CAEb;AACA;;AAHa,OAAd;AAMA,KAxCD;AAyCA;;AAEDwB,EAAAA,MAAM,GAAG;AAER,wBACC;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAC,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,eAGC;AAAK,MAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACK;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAGE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,KAAK,EAAE,KAAK3C,KAAL,CAAWhB,YAA1B;AAAwC,MAAA,QAAQ,EAAE,KAAKR,YAAvD;AAAqE,MAAA,IAAI,EAAG,cAA5E;AAA2F,MAAA,SAAS,EAAC,UAArG;AAAgH,MAAA,EAAE,EAAC,oBAAnH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAQ,MAAA,MAAM,MAAd;AAAe,MAAA,KAAK,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADD,EAEE,KAAKwB,KAAL,CAAWE,KAFb,CADF,eAKP;AAAQ,MAAA,KAAK,EAAE,KAAKF,KAAL,CAAWf,aAA1B;AAAyC,MAAA,QAAQ,EAAE,KAAKT,YAAxD;AAAsE,MAAA,IAAI,EAAG,eAA7E;AAA6F,MAAA,SAAS,EAAC,UAAvG;AAAkH,MAAA,EAAE,EAAC,oBAArH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACU;AAAQ,MAAA,MAAM,MAAd;AAAe,MAAA,KAAK,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADV,EAEW,KAAKwB,KAAL,CAAWG,MAFtB,CALO,eASP;AAAQ,MAAA,KAAK,EAAE,KAAKH,KAAL,CAAWd,WAA1B;AAAuC,MAAA,QAAQ,EAAE,KAAKV,YAAtD;AAAoE,MAAA,IAAI,EAAG,aAA3E;AAAyF,MAAA,SAAS,EAAC,UAAnG;AAA8G,MAAA,EAAE,EAAC,oBAAjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACU;AAAQ,MAAA,MAAM,MAAd;AAAe,MAAA,KAAK,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADV,EAEW,KAAKwB,KAAL,CAAWD,IAFtB,CATO,eAaE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAA+B,MAAA,EAAE,EAAC,qBAAlC;AAAwD,MAAA,OAAO,EAAE,KAAKO,eAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF,CADF,CAHF,CADL,eAiCK;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAxB,CADF,eAEE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAxB,CAFF,eAGP;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAxB,CAHO,CADF,eAQE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAgC,MAAA,EAAE,EAAC,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKN,KAAL,CAAWK,KADd,CARF,CADF,CAjCL,CAHD,CADD;AAsDA;;AAnTsD","sourcesContent":["import React from 'react';\nimport PageNavbar from './PageNavbar';\nimport BillboardRow from './BillboardRow';\n// import BillboardRowTest from './BillboardRowTest';\nimport '../style/Billboards.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default class Billboards extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tselectedBillboard: \"\",\n\t\t\tselectedYear: \"\",\n\t\t\tselectedMonth: \"\",\n\t\t\tselectedDay: \"\",\n\t\t\tyears: [],\n\t\t\tmonths: [],\n\t\t\tdays: [],\n\t\t\tbillboards: [],\n\t\t\tsongs: []\n\t\t\t// , songsTest: []\n\t\t};\n\n\t\tthis.submitBillboard = this.submitBillboard.bind(this);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t}\n\n\t\n\t/* ---- Billboards ---- */\n\tcomponentDidMount() {\n\t\t// Send an HTTP request to the server.\n\t\t// fetch(\"http://localhost:8081/billboards\",\n\t\t// {\n\t\t//   method: 'GET' // The type of HTTP request.\n\t\t// }).then(res => {\n\t\t//   // Convert the response data to a JSON.\n      \t// \treturn res.json();\n      \n\t\t// }, err => {\n\t\t//   // Print the error if there is one.\n\t\t//   console.log(err);\n\t\t// }).then(billboardList => {\n\t\t//   if (!billboardList) return;\n\t\t//   // Map each genreObj in genreList to an HTML element:\n\t\t//   // A button which triggers the showMovies function for each genre.\n\t\t//   let billboardDivs = billboardList.map((billboardObj, i) =>\n\t\t// //   <option value={billboardObj.billboard}>{billboardObj.billboard}</option> \n\t\t//   <option value={billboardObj.week_id}>{billboardObj.week_id}</option>  \n\t\t//   );\n\t\n\t\t  \n\t\n\t\t//   // Set the state of the genres list to the value returned by the HTTP response from the server.\n\t\t//   this.setState({\n        // \tbillboards: billboardDivs\n\t\t//   });\n\t\t// }, err => {\n\t\t//   // Print the error if there is one.\n\t\t//   console.log(err);\n\t\t// });\n\n\t\tfetch(\"http://localhost:8081/billboardsy/\",\n\t\t{\n\t\t  method: 'GET' // The type of HTTP request.\n\t\t}).then(res => {\n\t\t  // Convert the response data to a JSON.\n      \t\treturn res.json();\n\t\t}, err => {\n\t\t  // Print the error if there is one.\n\t\t  console.log(err);\n\t\t}).then(yearList => {\n\t\t  if (!yearList) return;\n\t\t  // Map each yearObj in genreList to an HTML element:\n\t\t  let yearDivs = yearList.map((yearObj, i) =>\n\t\t \t <option value={yearObj.year}>{yearObj.year}</option>  \n\t\t  );\n\t\t  // Set the state of the years list to the value returned by the HTTP response from the server.\n\t\t  this.setState({\n        \tyears: yearDivs\n\t\t  });\n\t\t}, err => {\n\t\t  // Print the error if there is one.\n\t\t  console.log(err);\n\t\t});\n\n\t\tfetch(\"http://localhost:8081/billboardsm/\",\n\t\t{\n\t\t  method: 'GET' // The type of HTTP request.\n\t\t}).then(res => {\n\t\t  // Convert the response data to a JSON.\n      \t\treturn res.json();\n\t\t}, err => {\n\t\t  // Print the error if there is one.\n\t\t  console.log(err);\n\t\t}).then(monthList => {\n\t\t  if (!monthList) return;\n\t\t  // Map each monthObj in genreList to an HTML element:\n\t\t  let monthDivs = monthList.map((monthObj, i) =>\n\t\t \t <option value={monthObj.month}>{monthObj.month}</option>  \n\t\t  );\n\t\t  // Set the state of the months list to the value returned by the HTTP response from the server.\n\t\t  this.setState({\n        \tmonths: monthDivs\n\t\t  });\n\t\t}, err => {\n\t\t  // Print the error if there is one.\n\t\t  console.log(err);\n\t\t});\n\n\t\tconsole.log(\"http://localhost:8081/billboardsd/\" + this.selectedYear + \"/\" + this.selectedMonth)\n\n\t\tfetch(\"http://localhost:8081/billboardsd/\" + this.selectedYear + \"/\" + this.selectedMonth,\n\t\t{\n\t\t  method: 'GET' // The type of HTTP request.\n\t\t}).then(res => {\n\t\t  // Convert the response data to a JSON.\n      \t\treturn res.json();\n\t\t}, err => {\n\t\t  // Print the error if there is one.\n\t\t  console.log(err);\n\t\t}).then(dayList => {\n\t\t  if (!dayList) return;\n\t\t  // Map each dayObj in genreList to an HTML element:\n\t\t  let dayDivs = dayList.map((dayObj, i) =>\n\t\t \t <option value={dayObj.day}>{dayObj.day}</option>  \n\t\t  );\n\t\t  // Set the state of the days list to the value returned by the HTTP response from the server.\n\t\t  this.setState({\n        \tdays: dayDivs\n\t\t  });\n\t\t}, err => {\n\t\t  // Print the error if there is one.\n\t\t  console.log(err);\n\t\t});\n\t}\n\n\t\n\t// handleChange(e) {\n\t// \tthis.setState({\n\t// \t\tselectedBillboard: e.target.value\n\t// \t});\n\t// }\n\n\thandleChange = (event) => {\n\t\tlet value = event.target.value;\n\t\tlet name = event.target.name;\n\t  \n\t\t// this.setState({\n\t\t// \t[name]: value\n\t\t// });\n\n\t\tif (name == 'selectedYear'){\n\t\t\tconsole.log(\"Update to year\");\n\t\t\tthis.setState({\n\t\t\t\tselectedYear: value\n\t\t\t});\n\t\t\tthis.selectedYear = value;\n\t\t} else if (name == 'selectedMonth'){\n\t\t\tconsole.log(\"Update to month\");\n\t\t\tthis.setState({\n\t\t\t\tselectedMonth: value\n\t\t\t});\n\t\t\tthis.selectedMonth = value;\n\n\t\t} else if (name == 'selectedDay'){\n\t\t\tconsole.log(\"Update to day\");\n\t\t\tthis.setState({\n\t\t\t\tselectedDay: value\n\t\t\t});\n\t\t\tthis.selectedDay = value;\n\t\t}\n\n\t\tconsole.log(name, value)\n\t\tconsole.log(\"selectedYear is \" + this.selectedYear)\n\t\tconsole.log(\"selectedMonth is \" + this.selectedMonth)\n\n\n\t\t// update options for Day\n\n\t\tconsole.log(\"http://localhost:8081/billboardsd/\" + this.selectedYear + \"/\" + this.selectedMonth)\n\n\t\tfetch(\"http://localhost:8081/billboardsd/\" + this.selectedYear + \"/\" + this.selectedMonth,\n\t\t{\n\t\t  method: 'GET' // The type of HTTP request.\n\t\t}).then(res => {\n\t\t  // Convert the response data to a JSON.\n      \t\treturn res.json();\n\t\t}, err => {\n\t\t  // Print the error if there is one.\n\t\t  console.log(err);\n\t\t}).then(dayList => {\n\t\t  if (!dayList) return;\n\t\t  // Map each dayObj in genreList to an HTML element:\n\t\t  let dayDivs = dayList.map((dayObj, i) =>\n\t\t \t <option value={dayObj.day}>{dayObj.day}</option>  \n\t\t  );\n\t\t  // Set the state of the days list to the value returned by the HTTP response from the server.\n\t\t  this.setState({\n        \tdays: dayDivs\n\t\t  });\n\t\t}, err => {\n\t\t  // Print the error if there is one.\n\t\t  console.log(err);\n\t\t});\n\t  }\n\n\t  // hit Submit\n\tsubmitBillboard() {\n\t\t// var fixed = this.state.selectedBillboard.replace(/\\//g,\"-\")\n\t\tvar fixed = this.selectedMonth + \"-\" + this.selectedDay + \"-\" + this.selectedYear\n\n\t\tconsole.log(\"http://localhost:8081/billboards/\" + fixed);\n\n\t\t// fetch(\"http://localhost:8081/billboards/\" + this.state.selectedBillboard,\n\t\tfetch(\"http://localhost:8081/billboards/\" + fixed,\n\t\t{\n\t\t\tmethod: \"GET\"\n\t\t}).then(res => {\n\t\t\treturn res.json();\n\t\t}, err => {\n\t\t\tconsole.log(err);\n\t\t}).then(songList => {\n\t\t\tconsole.log(songList); //displays your JSON object in the console\n\t\t\tlet songDivs = songList.map((song, i) => \n\t\t\t\t// <RecommendationsRow key={recommendation.id} movie={recommendation} />\n\t\t\t\t<div id=\"results\" key={i} className=\"results-container\">\n\t\t\t\t\t<BillboardRow song_title={song.song_title} artist_name={song.artist_name} week_position={song.week_position} peak_position={song.peak_position} weeks_on_chart={song.weeks_on_chart}\n\t\t\t\t\trelease_date={song.release_date} release_year={song.release_year} acousticness={song.acousticness} danceability={song.danceability} \n\t\t\t\t\tduration_ms={song.duration_ms} energy={song.energy} explicit={song.explicit} instrumentalness={song.instrumentalness} musical_key={song.musical_key}\n\t\t\t\t\tliveness={song.liveness} loudness={song.loudness} mode={song.mode} popularity={song.popularity} speechiness={song.speechiness} \n\t\t\t\t\ttempo={song.tempo} valence={song.valence} genre={song.genre}/>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t);\n\n\t\t\t// //test\n\t\t\t// let songDivsTest = songList.map((song, i) => \n\t\t\t// \t// <RecommendationsRow key={recommendation.id} movie={recommendation} />\n\t\t\t// \t<div id=\"results\" key={i} className=\"results-container\">\n\t\t\t// \t\t<BillboardRowTest song_title={song.song_title} artist_name={song.artist_name} week_position={song.week_position} peak_position={song.peak_position} weeks_on_chart={song.weeks_on_chart}\n\t\t\t// \t\trelease_date={song.release_date} release_year={song.release_year} acousticness={song.acousticness} danceability={song.danceability} \n\t\t\t// \t\tduration_ms={song.duration_ms} energy={song.energy} explicit={song.explicit} instrumentalness={song.instrumentalness} musical_key={song.musical_key}\n\t\t\t// \t\tliveness={song.liveness} loudness={song.loudness} mode={song.mode} popularity={song.popularity} speechiness={song.speechiness} \n\t\t\t// \t\ttempo={song.tempo} valence={song.valence} genre={song.genre}/>\n\t\t\t// \t</div>\n\t\t\t\t\n\t\t\t// );\n\n\t\t\tthis.setState({\n\t\t\t\tsongs: songDivs,\n\t\t\t\t//test\n\t\t\t\t// songsTest: songDivsTest\n\n\t\t\t});\n\t\t});\n\t}\n\n\trender() {\n\n\t\treturn (\n\t\t\t<div className=\"Billboards\">\n\t\t\t\t<PageNavbar active=\"billboards\" />\n\n\t\t\t\t<div className=\"container billboards-container\">\n\t\t\t      <div className=\"jumbotron\">\n\t\t\t        <div className=\"h5\">Billboards</div>\n\n\t\t\t        <div className=\"years-container\">\n\t\t\t          <div className=\"dropdown-container\">\n\t\t\t            <select value={this.state.selectedYear} onChange={this.handleChange} name = 'selectedYear' className=\"dropdown\" id=\"billboardsDropdown\">\n\t\t\t            \t<option select value> -- select a year -- </option>\n\t\t\t            \t{this.state.years}\n\t\t\t            </select>\n\t\t\t\t\t\t<select value={this.state.selectedMonth} onChange={this.handleChange} name = 'selectedMonth' className=\"dropdown\" id=\"billboardsDropdown\">\n\t\t\t            \t<option select value> -- select a month -- </option>\n\t\t\t            \t{this.state.months}\n\t\t\t            </select>\n\t\t\t\t\t\t<select value={this.state.selectedDay} onChange={this.handleChange} name = 'selectedDay' className=\"dropdown\" id=\"billboardsDropdown\">\n\t\t\t            \t<option select value> -- select a day -- </option>\n\t\t\t            \t{this.state.days}\n\t\t\t            </select>\n\t\t\t            <button className=\"submit-btn\" id=\"billboardsSubmitBtn\" onClick={this.submitBillboard}>Submit</button>\n\t\t\t          </div>\n\t\t\t        </div>\n\t\t\t      </div>\n\n\t\t\t\t\t{/* test */}\n\t\t\t\t  {/* <table className= 'table-container'>\n\t\t\t\t\t  <tr>\n\t\t\t\t\t\t<th>Week Position</th>\n\t\t\t\t\t\t<th>Song Title</th>\n\t\t\t\t\t\t<th>Artist Name</th>\n\t\t\t\t\t  </tr>\n\t\t\t\t\t  {this.state.songsTest}\n\t\t\t  \t  </table> */}\n\n\t\t\t      <div className=\"jumbotron\">\n\t\t\t        <div className=\"song-container\">\n\t\t\t          <div className=\"song\">\n\t\t\t            <div className=\"header\"><strong>Week Position</strong></div>\n\t\t\t            <div className=\"header\"><strong>Song Title</strong></div>\n\t\t\t\t\t\t<div className=\"header\"><strong>Artist Name</strong></div>\n\t\t\t\t\t\t{/* <div className=\"header\"><strong>Peak Position</strong></div>\n\t\t\t\t\t\t<div className=\"header\"><strong>Weeks On Chart</strong></div> */}\n\t\t\t          </div>\n\t\t\t          <div className=\"song-container\" id=\"results\">\n\t\t\t            {this.state.songs}\n\t\t\t          </div>\n\t\t\t        </div>\n\t\t\t      </div>\n\t\t\t    </div>\n\t\t\t</div>\n\t\t);\n\t}\n}"]},"metadata":{},"sourceType":"module"}